Automatic Method
================
This is recommended for most cases.  If you need more control than what's
available here, use the `manual method`_ of configuring your latex targets.


Simple Documents
----------------
Let's assume you have the simplest scenario: a tex document across one or more
files with no dependency on auxillary tools.

.. code:: CMake

  create_tex_document(TARGET doc.pdf
                      STEPS lualatex
                      MAIN_FILE doc.tex
                      DEPENDENCIES
                        doc.tex
                        doc2.tex
                      ALL
                     )

At this point you're good to go.  Your build system will build your document
automaticlaly (e.g., :code:`make`).


create_tex_document
-------------------
The driver for this method is :code:`create_tex_document`; it will drive the
commands and create a target your build system can use.  A typical use case
looks like this:

The following arguments are required:

:code:`TARGET`
  The target for your build system.  In this example, you could build the
  document by doing something like :code:`make doc.pdf`.

:code:`STEPS`
  The steps needed to build the target.  You can specify as many steps as
  needed (e.g., all the auxillary tools at once) but order *is not* guaranteed
  beyond what your build system promises.  If order among steps matters, you
  should use multiple calls to :code:`create_tex_document` with appropriate
  dependencies.

:code:`MAIN_FILE`
  The main file to use.  This is the passed each command specified in
  :code:`STEPS` *without modification*.

:code:`DEPENDENCIES`
  Any dependencies required for the stage of the document.  This will likely be
  either tex documents, other targets in the build system, or some combination
  of the two.

The following arguments are optional:

:code:`ALL`
  Makes the target part of the :code:`all` target.  By default, targets are
  only built if explicitly declared (e.g., :code:`make doc.pdf` vs simply
  :code:`make`).

:code:`RESULT_TARGET`
  A variable to store the resulting build-system targets generated by the
  function.  This is required if you want to have steps depend on each other
  (required for glossaries, indexes, bibliographies, etc.).


Complex Documents
-----------------
If you're using anything beyond the simple case, you'll probably need multiple
calls to :code:`create_tex_document` to ensure things are built in the correct
order.  By using :code:`RESULT_TARGET` you can use one step as a depency for
the next part of your build.

An example that uses a glossary, index, and bibliography might look like this
(copied from the test directory):

.. code:: CMake

  create_tex_document(TARGET book2.pdf
                      STEPS pdflatex
                      MAIN_FILE book.tex
                      RESULT_TARGET result_target
                      ALL
                     )
  create_tex_document(TARGET book2-aux
                      STEPS
                          makeglossaries
                          splitindex
                          bibtex
                      MAIN_FILE book
                      DEPENDENCIES ${result_target}
                      RESULT_TARGET result_target
                     )
  create_tex_document(TARGET book2.pdf-dummy
                      STEPS
                          pdflatex
                      MAIN_FILE book.tex
                      DEPENDENCIES ${result_target}
                      RESULT_TARGET result_target
                     )
  create_tex_document(TARGET book2.pdf-final
                      STEPS
                          pdflatex
                      MAIN_FILE book.tex
                      DEPENDENCIES ${result_target}
                     )

The two uses of :code:`create_tex_document` at the end are to handle
:code:`bibtex`'s requirement of invocations of :code:`pdflatex` and ensure the
build system doesn't parallelize the :code:`pdflatex` runs.


Examples
--------
Examples using this method are available in the test_ folder with inline
comments explaining what's happening and why.


.. _manual method: manual-method.rst
.. _test: ../test
